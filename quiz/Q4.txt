BEGIN
--------------------------------------------------------------------
Q1: Implement the following inline functions: 
inline int CircularBufferIsFull(CircularBuffer* que) 
inline int CircularBufferIsEmpty(CircularBuffer* que) 

--------------------------------------------------------------------
Q2: How to compute "Interrupt Latency"?

At the hardware level, it's how many clock cycles have to occur between
the time that an interrupt is detected and the start of the interrupt
service routine. That number can vary depending on what instruction(s) 
the processor is executing at the time of the interrupt. Worse, it's
possible that interrupts have been temporarily disabled by the executing 
code, which will result in far larger latency times.

Also -- if an operating system (e.g. Linux) is running, then 
latency is roughly "whenever the OS decides to get around to it" --
i.e. the latency is non-deterministic.

Boards such as the mbed will have a lot better (shorter) interrupt service
latency than, say, a Raspberry Pi or Beaglebone, both of whch run Linux
distros.

--------------------------------------------------------------------
Q3: Serial pc(USBTX, USBRX); // tx, rx 
    What API (function) do you use to change the baud rate?

pc.baud( 57600 );  // changes rate to 57.6K

--------------------------------------------------------------------
Q4: How many bit(s) does TDO have? Is TDO an input or output type? (Ref: JTAG Pins) 

JTAG is a serial protocol, so I guess you could say it has 1 bit... But the
instruction register of each TAP controller must be at least 2 bits long, to support the 
minimum number of instructions (4) required by IEEE 1149.1.

TDO (Test Data Out) is generated by the TAP controller of a JTAG-enabled device, and goes to the host.

--------------------------------------------------------------------
Q5:
What is the address of ledArr[0]? 
What is the address of ch? 


/* 
* Enter a hex number [0-9a-fA-F]; Decode it in 4-bit binary format and display them on 4 on board leds. 
*/ 

#include "mbed.h" 

Serial pc(USBTX, USBRX); // tx, rx 
DigitalOut ledArr[4] = {DigitalOut(LED1), DigitalOut(LED2), DigitalOut(LED3), DigitalOut(LED4)}; 
void DisplayLed(int ch) 
{ 
	int i=0;

	if (ch>='0' && ch<='9')
		ch-='0';
	else if (ch>='A' && ch<='F') {
		ch-='A';
		ch+=10;
	} else if (ch>='a' && ch<='f') {
		ch-='a';
		ch+=10;
	} else
		ch=0;

	for (i=0; i<4; i++) { 
		if(ch& (1<<i))
			ledArr[i] = 1; 
		else
			ledArr[i] = 0;
	} 
} 

int main(void) { 
	int ch; 
	pc.baud(9600); 
	pc.printf("\r\nHello World!"); 
	while(1) { 
		pc.printf("\r\nEnter:"); 
		ch = pc.getc(); 
		pc.putc(ch); 
		DisplayLed(ch); 
	} 
}
